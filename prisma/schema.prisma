// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mongodb"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.text annotations in model Account below
    // Further reading: 
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Example {
  id String @id @default(auto()) @map("_id") @db.ObjectId
}

// Necessary for Next auth
model Account {
  id String @id @default(auto()) @map("_id") @db.ObjectId
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? //@db.Text
    access_token      String? //@db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? //@db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
  id String @id @default(auto()) @map("_id") @db.ObjectId
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(auto()) @map("_id") @db.ObjectId
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    createdAt     DateTime           @default(now())
    updatedAt     DateTime           @updatedAt
    followedByIDs String[]  @db.ObjectId
    followingIDs  String[]  @db.ObjectId
    followedBy    User[]    @relation("UserFollows", fields:[followedByIDs], references:[id])
    following     User[]    @relation("UserFollows", fields:[followingIDs], references:[id])
    posts         Post[]
    comments      Comment[]
}

model VerificationToken {
    id         String   @id @default(cuid()) @map("_id")
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Comment {
    id            String             @id @default(auto()) @map("_id") @db.ObjectId
    content       String
    createdAt     DateTime           @default(now())
    updatedAt     DateTime           @updatedAt
    postIDs       String             @db.ObjectId
    post          Post               @relation(fields: [postIDs], references: [id], onDelete: Cascade)
    userIDs       String             @db.ObjectId
    user          User               @relation(fields: [userIDs], references: [id], onDelete: Cascade)
}

model Post {
    id            String             @id @default(auto()) @map("_id") @db.ObjectId
    content       String?
    image         String?
    comments      Comment[]
    createdAt     DateTime           @default(now())
    updatedAt     DateTime           @updatedAt
    userIDs       String             @db.ObjectId
    user          User               @relation(fields: [userIDs], references: [id], onDelete: Cascade)
}


